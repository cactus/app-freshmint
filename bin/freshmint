#!/usr/bin/env ruby

require 'rubygems'
#require "bundler/setup"
require 'logger'
require 'optparse'
require 'ostruct'
require 'ansi'
require "eventmachine"
require "em-http-request"
require "em-synchrony"

HTTP_CLIENTS = 3

### this snippet from github.com/rtomayko/ronn
begin
    require 'freshmint'
rescue LoadError => err
    if err.to_s =~ /freshmint/
        libdir = File.expand_path("../../lib", __FILE__)
        if File.directory?(libdir) && !$:.include?(libdir)
            #warn "warn: #{err}. adding #{libdir} to RUBYLIB ..."
            $:.unshift libdir
            retry
        end
    end
    abort err.to_s
end
### end

def usage
    puts File.readlines(__FILE__).
        grep(/^#\/.*/).
        map { |line| line.chomp[3..-1] }.join("\n")
end

LOG = ANSI::Logger.new(STDERR)
LOG.ansicolor = false unless STDOUT.tty?
LOG.level = Logger::WARN
LOG.formatter = proc { |severity, datetime, progname, msg| "#{msg}\n" }

options = OpenStruct.new
options.verbose = false

ARGV.options do |opts|
    opts.version = Freshmint::VERSION
    opts.banner = "Usage: #{$0} [options]"
    opts.separator ""

    opts.on("-v", "Verbose mode output.") do |v|
        options.verbose = v
    end

    opts.on_tail("-h", "--help", "Show this help message") do
        puts opts
        exit
    end

    opts.on_tail("--version", "Show version") do
        printf "%s v%s\n", 'freshmint', Freshmint::VERSION
        exit
    end
    opts.parse!
end

pbar_output = true
if options.verbose
    LOG.level = Logger::DEBUG
    Freshmint.log = LOG
    pbar_output = false
end

app_dirs = [
    File.expand_path('~/Applications'),
    File.expand_path('/Applications'),
]

pbar = Freshmint::Progress.new("Finding apps", app_dirs.size, pbar_output)
apps = pbar.progress_reduce(app_dirs) do |appdir|
    Freshmint.find_apps(appdir)
end
apps.flatten!

pbar = Freshmint::Progress.new("Reading plists", apps.size, pbar_output)
apps = pbar.progress_reduce(apps) do |app|
    Freshmint.read_plist(app)
end

pbar = Freshmint::Progress.new("Fetching", apps.size, pbar_output)
failed_reqs = []
EM.synchrony do
    apps = EM::Synchrony::Iterator.new(apps, HTTP_CLIENTS).map do |app, iter|
        http = EM::HttpRequest.new(app.SUFeedURL).get :redirects => 1
        http.errback {
            pbar.inc
            app.sparkle_error = http.error
            if http.error.empty? and http.response_header.status == 0
                app.sparkle_error = 'Connection failed'
            end
            failed_reqs << app
            iter.return(nil)
        }
        http.callback {
            pbar.inc
            app.sparkle_data = http.response
            iter.return(app)
        }
    end
    EM.stop
    pbar.finish
end

pbar = Freshmint::Progress.new("Checking", apps.size, pbar_output)
updates = pbar.progress_reduce(apps) do |app|
    Freshmint.check_version_feed(app)
end

if failed_reqs.size > 0
    puts ANSI.red { "Errors:" }
    error_table = failed_reqs.collect { |app| [app.name, app.sparkle_error] }
    error_table = [['name', 'error']].concat(error_table)
    table = ANSI::Table.new(error_table) do |row,col|
        row != 0 and col == 1 ? :red : :clear
    end
    puts table
end

if updates.size > 0
    update_h = [['name', 'existing v-b', 'new v-b']]
    update_h.concat(updates)
    table = ANSI::Table.new(update_h) do |row,col|
        row != 0 and col == 2 ? :red : :clear
    end
    puts table
else
    puts ANSI.yellow { "No updates available" }
end
